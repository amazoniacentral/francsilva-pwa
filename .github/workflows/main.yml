name: Build PWA APK for Google Play Store

on:
  push:
    branches:
      - main  # Isso roda o workflow sempre que houver push na branch 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Versão 4 do checkout

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '17'  # Usando Node.js 17

    - name: Install Bubblewrap CLI globally
      run: |
        npm install -g @bubblewrap/cli  # Instalando o Bubblewrap CLI globalmente

    - name: Install Android SDK and JDK 17
      run: |
        sudo apt update -y
        sudo apt install -y openjdk-17-jdk curl unzip expect
        
        # Baixando e instalando o Android SDK
        mkdir -p $HOME/android-sdk
        curl -s https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -o commandlinetools-linux.zip
        unzip commandlinetools-linux.zip -d $HOME/android-sdk
        yes | $HOME/android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk --update
        yes | $HOME/android-sdk/cmdline-tools/bin/sdkmanager --sdk_root=$HOME/android-sdk "platform-tools" "platforms;android-30"
        
        # Garantindo que o adb e o SDK estejam no PATH
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH

        # Verificando se o Java JDK 17 está instalado corretamente
        java -version

    - name: Download and save manifest locally
      run: |
        mkdir -p app  # Certificando-se de que o diretório app existe
        curl -o app/manifest.json https://api.gvendas.app.br/gvendas/site/3/manifest/?format=json  # Baixando o manifesto para o diretório app/
        ls -l app/manifest.json  # Verificando se o arquivo foi baixado corretamente

    - name: Decode Keystore from base64 and create keystore.jks inside app/
      run: |
        mkdir -p app  # Certificando-se de que o diretório app existe
        echo "${{ secrets.KEYSTORE }}" | base64 --decode > app/keystore.jks  # Caminho relativo para o diretório app
        ls -l app/keystore.jks  # Verificar se o arquivo foi gerado corretamente

    - name: Initialize Bubblewrap project with automated answers
      run: |
        expect <<EOF
        spawn bubblewrap init --manifest=$PWD/app/manifest.json  # Usando o manifesto baixado localmente
        expect "Do you want to install the Android SDK?" { send "y\r" }
        expect "Do you want to install the Android JDK?" { send "y\r" }
        expect "Select Android SDK version to use" { send "17\r" }
        expect "Would you like to continue with default configurations?" { send "y\r" }
        expect "Enter a keystore path" { send "$PWD/app/keystore.jks\r" }  # Caminho relativo para o diretório app
        expect "Enter the keystore password" { send "${{ secrets.KEYSTORE_PASSWORD }}\r" }
        expect "Enter the key alias" { send "${{ secrets.KEY_ALIAS }}\r" }
        expect eof
        EOF

    - name: Build the APK (Debug) inside app/
      run: |
        yes | bubblewrap build --debug --sdk 17 --version 4 --output app/  # Gerar o APK dentro do diretório app/

    - name: Build the APK (Release) inside app/
      run: |
        yes | bubblewrap build --release --sdk 17 --version 4 --keystore $PWD/app/keystore.jks --keystore-password ${{ secrets.KEYSTORE_PASSWORD }} --key-alias ${{ secrets.KEY_ALIAS }} --output app/  # Gerar o APK dentro do diretório app/

    - name: Upload Debug APK as artifact
      uses: actions/upload-artifact@v4  # Usando a versão v4 do upload-artifact
      with:
        name: app-debug.apk
        path: app/app-debug.apk  # Caminho para o APK de debug dentro do diretório app

    - name: Upload Release APK as artifact
      uses: actions/upload-artifact@v4  # Usando a versão v4 do upload-artifact
      with:
        name: app-release.apk
        path: app/app-release.apk  # Caminho para o APK de release dentro do diretório app
